Multimap is an associative container that contains a sorted list of key-value pairs, while permitting multiple 
entries with the same key.In multimap there is a key and a particular value associated with it which is used for 
our reference generally.Sorting is done according to the comparison function Compare, applied to the keys or the
value depending upon our algorithm.Search, insertion, and removal operations have logarithmic complexity.
One must include <map> header file to use multimap.

Syntax to create multimap:

multimap<int,int> m1;
Creates empty multimap m1 that stores key and mapped value both of int data type.
multimap<int,int> m2={{1,20},{2,50}};
Creates initialised multimap m2
multimap<int,int> m3(m2.begin(),m2.end());
Creates a copy of multimap m2 using iterators.
multimap<int,int> m4=m2;
Creates a copy of multimap m2

Some Member Functions of map:

begin( ): It returns an iterator(explained above) referring to the first element of multimap.Its time complexity is O(1).
Syntax:
multmap_name.begin()
insert( ):It inserts a single element or the range of elements in the multmap.Its time complexity is O(logN)where N is the number of elements in the map, when only element is inserted and O(1) when position is also given.
Syntax:
multmap_name.insert({key,element})
end( ): It returns an iterator referring to the theoretical element(doesn’t point to an element) which follows the last element.Its time complexity is O(1).
Syntax:
multmap_name.end()
count( ):It searches the multmap for the elements mapped by the given key and returns the number of matches..Its time complexity is O(logN) where N is the number of elements in the map.
Syntax:
multmap_name.count(k) //k is the key
find( ): It searches the multmap for the element with the given key, and returns an iterator to it, if it is present in the multimap otherwise it returns an iterator to the theoretical element which follows the last element of the multmap.Its time complexity is O(logN) where N is the number of elements in the multimap.
Syntax:
multmap_name.find(key)
clear( ): It clears the multimap, by removing all the elements from the multmap and leaving it with its size 0.Its time complexity is O(N) where N is the number of elements in the multimap.
Syntax:
multmap_name.clear()
empty( ): It checks whether the multimap is empty or not. It doesn’t modify the multimap.It returns 1 if the multimap is empty otherwise it returns 0.Its time complexity is O(1).
Syntax:
multimap_name.empty()
erase( ): It removes a single element or the range of elements from the multimap.
Syntax for erasing a key:
multimap_name.erase(key)
Syntax for erasing the value from a particular position pos:
multimap_name.erase(pos)
Syntax for erasing values within a given range [pos1,pos2):
multimap_name.erase(pos1,pos2)

Implementation:

                                                            
#include <bits/stdc++.h>
using namespace std;
 
int main() {
    multimap<int,int> m;  //creating empty map m
    
    //inserting values in map m
    m.insert({1,10});
    m.insert({1,30});
    m.insert({2,50});
    m.insert({4,60});
    m.insert({4,70});
    m.insert({5,90});
    
    //displaying elements of the map
    cout<<"Elements in map m:\n";
    for(auto it=m.begin();it!=m.end();it++)
    {
        cout<<it->first<<":"<<it->second<<"\n";
    }
    
    //gives number of 4 present in the multimap
    cout<<"\nCount of key 4:"<<m.count(4)<<"\n";
    
    //inserts values 
    m.insert(pair<int,int>(3,20));
    m.insert(pair<int,int>(3,30));
    
    //printing the elements of the multimap
    cout<<"\nElements in map m after inserting new values:\n";
    for(auto it=m.begin();it!=m.end();it++)
    {
        cout<<it->first<<":"<<it->second<<"\n";
    }
    
    //erase elements
    m.erase(m.begin(),m.find(3));
    
    cout<<"\nElements after removing element:\n";
    //Elements removed from a given range
    cout<<"\n";
    for(auto it=m.begin();it!=m.end();it++)
    {
        cout<<it->first<<":"<<it->second<<"\n";
    }
    
    //Removing a single element 
    int num=m.erase(5);
    
    cout<<"\n";
    for(auto it=m.begin();it!=m.end();it++)
    {
        cout<<it->first<<":"<<it->second<<"\n";
    }
    
    // your code goes here
    return 0;
}

Output:

Elements in map m:
1:10
1:30
2:50
4:60
4:70
5:90

Count of key 4:2

Elements in map m after inserting new values:
1:10
1:30
2:50
3:20
3:30
4:60
4:70
5:90

Elements after removing element:

3:20
3:30
4:60
4:70
5:90

3:20
3:30
4:60
4:70
                                              